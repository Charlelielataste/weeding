// Utilitaires pour g√©n√©rer des thumbnails de vid√©os c√¥t√© client

/**
 * G√©n√®re un thumbnail (image) √† partir d'un fichier vid√©o
 * @param videoFile - Le fichier vid√©o
 * @param timeSeconds - Moment o√π capturer (en secondes, d√©faut: 1s)
 * @returns Promise avec l'URL blob du thumbnail
 */
export async function generateVideoThumbnail(
  videoFile: File,
  timeSeconds: number = 1
): Promise<string> {
  return new Promise((resolve, reject) => {
    const video = document.createElement("video");
    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");

    if (!ctx) {
      reject(new Error("Canvas context non disponible"));
      return;
    }

    // Timeout pour les vid√©os qui ne se chargent jamais
    const timeoutId = setTimeout(() => {
      video.remove();
      reject(
        new Error(
          "Timeout - impossible de charger la vid√©o (probablement format iPhone non support√©)"
        )
      );
    }, 10000); // 10 secondes

    // Am√©lioration pour les vid√©os iPhone
    video.crossOrigin = "anonymous";
    video.preload = "metadata";
    video.muted = true; // Important pour l'autoplay sur iOS
    video.playsInline = true; // √âvite le mode plein √©cran sur iOS

    // Essayer de forcer le d√©codage
    video.setAttribute("webkit-playsinline", "true");

    video.addEventListener("loadedmetadata", () => {
      console.log("üìπ M√©tadonn√©es vid√©o charg√©es:", {
        duration: video.duration,
        videoWidth: video.videoWidth,
        videoHeight: video.videoHeight,
        readyState: video.readyState,
      });

      // V√©rifier que les dimensions sont valides
      if (video.videoWidth === 0 || video.videoHeight === 0) {
        clearTimeout(timeoutId);
        video.remove();
        reject(new Error("Dimensions vid√©o invalides - codec non support√©"));
        return;
      }

      // D√©finir la taille du canvas (aspect ratio pr√©serv√©)
      const maxWidth = 320;
      const maxHeight = 180;

      let { videoWidth, videoHeight } = video;

      // Calculer les dimensions en gardant l'aspect ratio
      if (videoWidth > videoHeight) {
        if (videoWidth > maxWidth) {
          videoHeight = (videoHeight * maxWidth) / videoWidth;
          videoWidth = maxWidth;
        }
      } else {
        if (videoHeight > maxHeight) {
          videoWidth = (videoWidth * maxHeight) / videoHeight;
          videoHeight = maxHeight;
        }
      }

      canvas.width = videoWidth;
      canvas.height = videoHeight;

      // Aller au moment sp√©cifi√© (mais pas trop t√¥t pour √©viter les frames noires)
      const targetTime = Math.min(
        Math.max(timeSeconds, 0.5),
        video.duration - 0.5
      );
      video.currentTime = targetTime;
    });

    video.addEventListener("seeked", () => {
      try {
        // V√©rifier que la vid√©o est vraiment pr√™te
        if (video.readyState < 2) {
          // HAVE_CURRENT_DATA
          console.warn(
            "‚ö†Ô∏è Vid√©o pas compl√®tement charg√©e, nouvelle tentative..."
          );
          setTimeout(() => {
            if (video.readyState >= 2) {
              renderThumbnail();
            } else {
              clearTimeout(timeoutId);
              video.remove();
              reject(new Error("Vid√©o ne peut pas √™tre d√©cod√©e"));
            }
          }, 500);
          return;
        }

        renderThumbnail();
      } catch (error) {
        clearTimeout(timeoutId);
        video.remove();
        reject(error);
      }
    });

    function renderThumbnail() {
      try {
        // Dessiner la frame actuelle sur le canvas
        ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);

        // V√©rifier que quelque chose a √©t√© dessin√© (pas juste du noir)
        const imageData = ctx!.getImageData(0, 0, canvas.width, canvas.height);
        const isNotEmpty = imageData.data.some((pixel, index) => {
          // V√©rifier qu'il y a des pixels non-noirs (en ignorant l'alpha)
          if (index % 4 === 3) return false; // Canal alpha
          return pixel > 10; // Seuil pour √©viter le quasi-noir
        });

        if (!isNotEmpty) {
          console.warn(
            "‚ö†Ô∏è Frame apparemment vide, tentative √† un autre moment..."
          );
          // Essayer √† un autre moment
          video.currentTime = Math.min(
            video.duration * 0.25,
            video.duration - 1
          );
          return;
        }

        // Convertir en blob URL
        canvas.toBlob(
          (blob) => {
            clearTimeout(timeoutId);
            if (blob) {
              const thumbnailUrl = URL.createObjectURL(blob);
              resolve(thumbnailUrl);
            } else {
              reject(new Error("Impossible de cr√©er le thumbnail"));
            }
            // Nettoyer
            video.remove();
          },
          "image/jpeg",
          0.8
        ); // 80% qualit√© JPEG
      } catch (error) {
        clearTimeout(timeoutId);
        video.remove();
        reject(
          new Error(`Erreur lors de la g√©n√©ration du thumbnail: ${error}`)
        );
      }
    }

    video.addEventListener("error", (e) => {
      clearTimeout(timeoutId);
      const errorEvent = e as ErrorEvent;
      console.error("‚ùå Erreur chargement vid√©o:", {
        error: errorEvent.error,
        message: errorEvent.message,
        mediaError: video.error,
      });

      let errorMessage = "Erreur chargement vid√©o";
      if (video.error) {
        switch (video.error.code) {
          case MediaError.MEDIA_ERR_ABORTED:
            errorMessage = "Chargement vid√©o abandonn√©";
            break;
          case MediaError.MEDIA_ERR_NETWORK:
            errorMessage = "Erreur r√©seau lors du chargement";
            break;
          case MediaError.MEDIA_ERR_DECODE:
            errorMessage =
              "Erreur d√©codage vid√©o - format probablement non support√© (iPhone HEVC?)";
            break;
          case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:
            errorMessage = "Format vid√©o non support√© par le navigateur";
            break;
        }
      }

      video.remove();
      reject(new Error(errorMessage));
    });

    // Charger la vid√©o
    video.src = URL.createObjectURL(videoFile);
    video.load();
  });
}

/**
 * G√©n√®re plusieurs thumbnails √† diff√©rents moments de la vid√©o
 * @param videoFile - Le fichier vid√©o
 * @param count - Nombre de thumbnails √† g√©n√©rer (d√©faut: 3)
 * @returns Promise avec array d'URLs blob
 */
export async function generateMultipleThumbnails(
  videoFile: File,
  count: number = 3
): Promise<string[]> {
  return new Promise((resolve, reject) => {
    const video = document.createElement("video");
    const thumbnails: string[] = [];

    video.addEventListener("loadedmetadata", async () => {
      const duration = video.duration;
      const interval = duration / (count + 1); // √âviter d√©but et fin

      try {
        for (let i = 1; i <= count; i++) {
          const timePoint = interval * i;
          const thumbnail = await generateVideoThumbnail(videoFile, timePoint);
          thumbnails.push(thumbnail);
        }
        resolve(thumbnails);
      } catch (error) {
        reject(error);
      }
    });

    video.addEventListener("error", (e) => {
      reject(new Error(`Erreur chargement vid√©o: ${e}`));
    });

    video.src = URL.createObjectURL(videoFile);
    video.load();
  });
}

/**
 * Nettoie les URLs blob g√©n√©r√©es pour lib√©rer la m√©moire
 * @param thumbnailUrls - Array d'URLs √† nettoyer
 */
/**
 * Convertit un thumbnail blob en base64 pour l'upload
 * @param thumbnailUrl - URL blob du thumbnail
 * @returns Promise avec les donn√©es base64
 */
export async function thumbnailToBase64(thumbnailUrl: string): Promise<string> {
  return new Promise((resolve, reject) => {
    const img = new Image();

    img.onload = () => {
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");

      if (!ctx) {
        reject(new Error("Canvas context non disponible"));
        return;
      }

      canvas.width = img.width;
      canvas.height = img.height;

      ctx.drawImage(img, 0, 0);

      // Convertir en base64
      const base64Data = canvas.toDataURL("image/jpeg", 0.8);
      resolve(base64Data);
    };

    img.onerror = () => {
      reject(new Error("Erreur chargement image"));
    };

    img.src = thumbnailUrl;
  });
}

export function cleanupThumbnails(thumbnailUrls: string[]) {
  thumbnailUrls.forEach((url) => {
    if (url.startsWith("blob:")) {
      URL.revokeObjectURL(url);
    }
  });
}
