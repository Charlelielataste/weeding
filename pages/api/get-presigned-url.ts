import type { NextApiRequest, NextApiResponse } from "next";
import { generatePresignedUploadUrl, getPublicUrl } from "../../lib/b2-client";
import path from "path";

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  console.log("üîó API presigned URL appel√©e:", {
    method: req.method,
    body: req.body,
    timestamp: new Date().toISOString(),
  });

  if (req.method !== "POST") {
    console.log("‚ùå M√©thode non autoris√©e:", req.method);
    return res.status(405).json({ error: "M√©thode non autoris√©e" });
  }

  try {
    const { fileName, fileType, mediaType } = req.body;
    console.log("üìã Param√®tres re√ßus:", { fileName, fileType, mediaType });

    if (!fileName || !fileType || !mediaType) {
      console.log("‚ùå Param√®tres manquants");
      return res.status(400).json({
        error: "Param√®tres manquants (fileName, fileType, mediaType requis)",
      });
    }

    // Cr√©er un nom unique pour le fichier
    const timestamp = Date.now();
    const extension = path.extname(fileName);
    const sanitizedName = fileName.replace(/[^a-zA-Z0-9._-]/g, "_");
    const uniqueFileName = `${mediaType}s/${timestamp}_${sanitizedName}`;

    // D√©terminer le bon Content-Type
    let contentType = fileType;

    // Pour les vid√©os, s'assurer que le type MIME est correct
    if (mediaType === "video") {
      const ext = extension.toLowerCase();
      if (ext === ".mp4" || ext === ".m4v") contentType = "video/mp4";
      else if (ext === ".mov" || ext === ".qt") contentType = "video/quicktime";
      else if (ext === ".3gp") contentType = "video/3gpp";
      else if (ext === ".webm") contentType = "video/webm";
      else if (ext === ".avi") contentType = "video/x-msvideo";
    }

    console.log("üîó G√©n√©ration URL pr√©-sign√©e:", {
      fileName: uniqueFileName,
      contentType,
      mediaType,
      originalName: fileName,
    });

    // G√©n√©rer l'URL pr√©-sign√©e (expire dans 1 heure)
    console.log("üîÑ G√©n√©ration de l'URL pr√©-sign√©e...");
    const presignedUrl = await generatePresignedUploadUrl(
      uniqueFileName,
      contentType,
      3600 // 1 heure
    );

    console.log("‚úÖ URL pr√©-sign√©e g√©n√©r√©e:", {
      urlLength: presignedUrl.length,
      startsWithHttps: presignedUrl.startsWith("https://"),
      domain: new URL(presignedUrl).hostname,
    });

    // URL publique pour acc√©der au fichier apr√®s upload
    const publicUrl = getPublicUrl(uniqueFileName);
    console.log("üìç URL publique g√©n√©r√©e:", publicUrl);

    console.log("‚úÖ R√©ponse envoy√©e avec succ√®s");
    return res.status(200).json({
      success: true,
      presignedUrl,
      fileName: uniqueFileName,
      publicUrl,
      expiresIn: 3600,
    });
  } catch (error) {
    console.error("‚ùå Erreur g√©n√©ration URL pr√©-sign√©e:", error);

    const errorMessage =
      error instanceof Error ? error.message : "Erreur inconnue";

    return res.status(500).json({
      error: "Erreur lors de la g√©n√©ration de l'URL pr√©-sign√©e",
      details: errorMessage,
    });
  }
}
